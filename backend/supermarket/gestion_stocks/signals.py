# stock/signals.py
"""
Syst√®me d'alertes automatiques pour la gestion de stock.
Les alertes sont cr√©√©es automatiquement lors des modifications de produits.
"""

from django.db.models.signals import post_save, pre_save
from django.dispatch import receiver
from django.utils import timezone
from datetime import timedelta
from .models import Produit, AlertStock, CommandeApprovisionnement, HistoriqueVente
from django.db.models import Sum


# ============================================================================
# ALERTES STOCK
# ============================================================================

@receiver(post_save, sender=Produit)
def alerte_stock_critique(sender, instance, **kwargs):
    """
    Alerte CRITIQUE: Stock sous le seuil de r√©approvisionnement.
    Priorit√©: HAUTE
    """
    if instance.estSousSeuil():
        # V√©rifier si l'alerte existe d√©j√† aujourd'hui
        alerte_existe = AlertStock.objects.filter(
            produit=instance,
            message__contains="STOCK CRITIQUE",
            date_creation__date=timezone.now().date()
        ).exists()
        
        if not alerte_existe:
            pourcentage = (instance.quantite_en_stock / instance.seuil_de_reapprovisionnement * 100) if instance.seuil_de_reapprovisionnement > 0 else 0
            
            AlertStock.objects.create(
                produit=instance,
                message=f"üî¥ STOCK CRITIQUE: {instance.nom} (R√©f: {instance.reference}) "
                       f"est sous le seuil! Stock actuel: {instance.quantite_en_stock} unit√©s, "
                       f"Seuil minimum: {instance.seuil_de_reapprovisionnement} unit√©s "
                       f"({pourcentage:.1f}% du seuil). R√©approvisionnement URGENT requis!"
            )


@receiver(post_save, sender=Produit)
def alerte_stock_zero(sender, instance, **kwargs):
    """
    Alerte URGENTE: Stock √©puis√© (0 unit√©s).
    Priorit√©: CRITIQUE
    """
    if instance.quantite_en_stock == 0:
        alerte_existe = AlertStock.objects.filter(
            produit=instance,
            message__contains="RUPTURE DE STOCK",
            date_creation__date=timezone.now().date()
        ).exists()
        
        if not alerte_existe:
            AlertStock.objects.create(
                produit=instance,
                message=f"‚õî RUPTURE DE STOCK: {instance.nom} (R√©f: {instance.reference}) "
                       f"est en rupture totale! Stock: 0 unit√©s. "
                       f"Action imm√©diate requise - Produit indisponible √† la vente!"
            )


@receiver(post_save, sender=Produit)
def alerte_stock_atteint_seuil(sender, instance, **kwargs):
    """
    Alerte INFO: Stock atteint exactement le seuil.
    Priorit√©: MOYENNE
    """
    if instance.atteintSeuil():
        alerte_existe = AlertStock.objects.filter(
            produit=instance,
            message__contains="SEUIL ATTEINT",
            date_creation__date=timezone.now().date()
        ).exists()
        
        if not alerte_existe:
            AlertStock.objects.create(
                produit=instance,
                message=f"‚ö†Ô∏è SEUIL ATTEINT: {instance.nom} (R√©f: {instance.reference}) "
                       f"a exactement {instance.quantite_en_stock} unit√©s en stock "
                       f"(seuil: {instance.seuil_de_reapprovisionnement}). "
                       f"Envisager un r√©approvisionnement prochainement."
            )


# ============================================================================
# ALERTES P√âREMPTION
# ============================================================================

@receiver(post_save, sender=Produit)
def alerte_produit_perime(sender, instance, **kwargs):
    """
    Alerte CRITIQUE: Produit p√©rim√©.
    Priorit√©: CRITIQUE
    """
    if instance.estPerime():
        alerte_existe = AlertStock.objects.filter(
            produit=instance,
            message__contains="PRODUIT P√âRIM√â",
            date_creation__date=timezone.now().date()
        ).exists()
        
        if not alerte_existe:
            jours_perime = (timezone.now().date() - instance.date_de_peremption).days
            
            AlertStock.objects.create(
                produit=instance,
                message=f"üî¥ PRODUIT P√âRIM√â: {instance.nom} (R√©f: {instance.reference}) "
                       f"est p√©rim√© depuis {jours_perime} jour(s)! "
                       f"Date de p√©remption: {instance.date_de_peremption}. "
                       f"Stock restant: {instance.quantite_en_stock} unit√©s. "
                       f"RETRAIT IMM√âDIAT DE LA VENTE REQUIS!"
            )


@receiver(post_save, sender=Produit)
def alerte_peremption_imminente_7j(sender, instance, **kwargs):
    """
    Alerte HAUTE: Produit p√©rime dans 7 jours ou moins.
    Priorit√©: HAUTE
    """
    jours_avant_peremption = (instance.date_de_peremption - timezone.now().date()).days
    
    if 0 < jours_avant_peremption <= 7 and not instance.estPerime():
        alerte_existe = AlertStock.objects.filter(
            produit=instance,
            message__contains="P√âREMPTION IMMINENTE",
            date_creation__date=timezone.now().date()
        ).exists()
        
        if not alerte_existe:
            AlertStock.objects.create(
                produit=instance,
                message=f"üü† P√âREMPTION IMMINENTE: {instance.nom} (R√©f: {instance.reference}) "
                       f"p√©rime dans {jours_avant_peremption} jour(s)! "
                       f"Date de p√©remption: {instance.date_de_peremption}. "
                       f"Stock: {instance.quantite_en_stock} unit√©s. "
                       f"Prioriser la vente ou retrait imm√©diat!"
            )


@receiver(post_save, sender=Produit)
def alerte_peremption_proche_30j(sender, instance, **kwargs):
    """
    Alerte INFO: Produit p√©rime dans 30 jours.
    Priorit√©: MOYENNE
    """
    jours_avant_peremption = (instance.date_de_peremption - timezone.now().date()).days
    
    if 7 < jours_avant_peremption <= 30:
        alerte_existe = AlertStock.objects.filter(
            produit=instance,
            message__contains="P√âREMPTION PROCHE",
            date_creation__date=timezone.now().date()
        ).exists()
        
        if not alerte_existe:
            AlertStock.objects.create(
                produit=instance,
                message=f"üü° P√âREMPTION PROCHE: {instance.nom} (R√©f: {instance.reference}) "
                       f"p√©rime dans {jours_avant_peremption} jour(s). "
                       f"Date de p√©remption: {instance.date_de_peremption}. "
                       f"Stock: {instance.quantite_en_stock} unit√©s. "
                       f"Planifier une promotion ou ajuster les commandes."
            )


# ============================================================================
# ALERTES COMMANDES
# ============================================================================

@receiver(post_save, sender=CommandeApprovisionnement)
def alerte_commande_retard(sender, instance, **kwargs):
    """
    Alerte: Commande en retard de livraison.
    Priorit√©: HAUTE
    """
    if instance.statut == 'EN_COURS' and instance.date_livraison_prevue < timezone.now():
        jours_retard = (timezone.now() - instance.date_livraison_prevue).days
        
        alerte_existe = AlertStock.objects.filter(
            produit__fournisseur=instance.fournisseur,
            message__contains=f"RETARD COMMANDE {instance.id_commande}",
            date_creation__date=timezone.now().date()
        ).exists()
        
        if not alerte_existe:
            # Cr√©er une alerte pour chaque produit de la commande
            details = instance.detailcommande_set.all()
            
            for detail in details:
                AlertStock.objects.create(
                    produit=detail.produit,
                    message=f"üü† RETARD COMMANDE: La commande {instance.id_commande} "
                           f"pour {detail.produit.nom} (R√©f: {detail.produit.reference}) "
                           f"est en retard de {jours_retard} jour(s)! "
                           f"Livraison pr√©vue: {instance.date_livraison_prevue.date()}. "
                           f"Fournisseur: {instance.fournisseur.nom}. "
                           f"Quantit√© attendue: {detail.quantite} unit√©s."
                )


# ============================================================================
# ALERTES VENTES
# ============================================================================

@receiver(post_save, sender=HistoriqueVente)
def alerte_forte_demande(sender, instance, created, **kwargs):
    """
    Alerte: Forte demande d√©tect√©e (vente > 50% du stock).
    Priorit√©: MOYENNE
    """
    if created:
        pourcentage_vendu = (instance.quantite_vendue / instance.produit.quantite_en_stock * 100) if instance.produit.quantite_en_stock > 0 else 100
        
        if pourcentage_vendu >= 50:
            alerte_existe = AlertStock.objects.filter(
                produit=instance.produit,
                message__contains="FORTE DEMANDE",
                date_creation__date=timezone.now().date()
            ).exists()
            
            if not alerte_existe:
                AlertStock.objects.create(
                    produit=instance.produit,
                    message=f"üìà FORTE DEMANDE: {instance.produit.nom} (R√©f: {instance.produit.reference}) "
                           f"conna√Æt une forte demande! Vente de {instance.quantite_vendue} unit√©s "
                           f"({pourcentage_vendu:.1f}% du stock actuel). "
                           f"Stock restant: {instance.produit.quantite_en_stock} unit√©s. "
                           f"Envisager d'augmenter les commandes."
                )


# ============================================================================
# ALERTES FOURNISSEURS
# ============================================================================

def alerte_delai_livraison_long(produit):
    """
    Alerte: D√©lai de livraison du fournisseur trop long.
    Priorit√©: BASSE
    """
    if produit.fournisseur.delais_livraison_jours > 7 and produit.estSousSeuil():
        alerte_existe = AlertStock.objects.filter(
            produit=produit,
            message__contains="D√âLAI LIVRAISON LONG",
            date_creation__date=timezone.now().date()
        ).exists()
        
        if not alerte_existe:
            AlertStock.objects.create(
                produit=produit,
                message=f"‚è∞ D√âLAI LIVRAISON LONG: {produit.nom} (R√©f: {produit.reference}) "
                       f"a un stock bas ET un d√©lai de livraison de {produit.fournisseur.delais_livraison_jours} jours. "
                       f"Fournisseur: {produit.fournisseur.nom}. "
                       f"Commander d√®s maintenant pour √©viter une rupture!"
            )


@receiver(post_save, sender=Produit)
def verifier_delai_livraison(sender, instance, **kwargs):
    """V√©rifier le d√©lai de livraison quand le stock change."""
    alerte_delai_livraison_long(instance)


# ============================================================================
# ALERTES PRIX
# ============================================================================

@receiver(pre_save, sender=Produit)
def alerte_changement_prix(sender, instance, **kwargs):
    """
    Alerte: Prix modifi√© (augmentation ou baisse significative).
    Priorit√©: BASSE
    """
    if instance.pk:  # Si le produit existe d√©j√†
        try:
            ancien_produit = Produit.objects.get(pk=instance.pk)
            
            if ancien_produit.prix_unitaire != instance.prix_unitaire:
                variation = ((instance.prix_unitaire - ancien_produit.prix_unitaire) / ancien_produit.prix_unitaire * 100)
                
                if abs(variation) >= 10:  # Changement de 10% ou plus
                    symbole = "üìà" if variation > 0 else "üìâ"
                    action = "augment√©" if variation > 0 else "diminu√©"
                    
                    AlertStock.objects.create(
                        produit=instance,
                        message=f"{symbole} CHANGEMENT DE PRIX: {instance.nom} (R√©f: {instance.reference}) "
                               f"a {action} de {abs(variation):.1f}%! "
                               f"Ancien prix: {ancien_produit.prix_unitaire} FCFA, "
                               f"Nouveau prix: {instance.prix_unitaire} FCFA. "
                               f"Mettre √† jour les √©tiquettes et le syst√®me de caisse."
                    )
        except Produit.DoesNotExist:
            pass


# ============================================================================
# NETTOYAGE AUTOMATIQUE DES ANCIENNES ALERTES
# ============================================================================

def nettoyer_anciennes_alertes():
    """
    Supprimer les alertes de plus de 30 jours (√† ex√©cuter p√©riodiquement).
    Peut √™tre appel√© via une t√¢che Celery ou un management command.
    """
    date_limite = timezone.now() - timedelta(days=30)
    alertes_supprimees = AlertStock.objects.filter(
        date_creation__lt=date_limite
    ).delete()
    
    return alertes_supprimees[0]  # Nombre d'alertes supprim√©es