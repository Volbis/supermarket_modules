/**
 * Composable pour g√©rer le cache des donn√©es
 * 
 * Permet de:
 * - Mettre en cache les r√©ponses API pour √©viter des requ√™tes inutiles
 * - Invalider le cache manuellement ou automatiquement
 * - V√©rifier l'√¢ge du cache
 * - Forcer le refresh des donn√©es
 * 
 * Usage:
 * const { loadWithCache, invalidateCache, cacheStatus } = useDataCache();
 * 
 * const data = await loadWithCache('products', async () => {
 *   return await productsAPI.getAllProducts();
 * });
 */

import { reactive } from 'vue';

// Store centralis√© du cache (partag√© entre toutes les instances du composable)
const cacheStore = reactive({});

// Dur√©e de vie par d√©faut du cache en millisecondes (5 minutes)
const DEFAULT_CACHE_TTL = 5 * 60 * 1000;

export function useDataCache() {
  /**
   * Charge des donn√©es avec mise en cache
   * @param {string} key - Cl√© unique pour identifier le cache
   * @param {Function} fetchFn - Fonction async qui retourne les donn√©es √† mettre en cache
   * @param {boolean} forceRefresh - Force le rechargement m√™me si le cache est valide
   * @param {number} ttl - Dur√©e de vie du cache en millisecondes
   * @returns {Promise} Les donn√©es (depuis le cache ou fra√Æchement charg√©es)
   */
  async function loadWithCache(key, fetchFn, forceRefresh = false, ttl = DEFAULT_CACHE_TTL) {
    const now = Date.now();
    
    // V√©rifier si on a un cache valide et qu'on ne force pas le refresh
    if (!forceRefresh && cacheStore[key] && (now - cacheStore[key].timestamp) < ttl) {
      console.log(`‚úÖ Cache HIT pour "${key}" (√¢ge: ${Math.floor((now - cacheStore[key].timestamp) / 1000)}s)`);
      return cacheStore[key].data;
    }
    
    // Cache invalide ou forc√©: charger les donn√©es
    console.log(`üîÑ Cache MISS pour "${key}" - Chargement depuis l'API...`);
    
    try {
      const data = await fetchFn();
      
      // Mettre en cache
      cacheStore[key] = {
        data: data,
        timestamp: now
      };
      
      console.log(`üíæ Donn√©es mises en cache pour "${key}"`);
      return data;
      
    } catch (error) {
      console.error(`‚ùå Erreur lors du chargement de "${key}":`, error);
      
      // En cas d'erreur, retourner le cache m√™me s'il est expir√© (fallback)
      if (cacheStore[key]) {
        console.warn(`‚ö†Ô∏è Utilisation du cache expir√© pour "${key}" (fallback)`);
        return cacheStore[key].data;
      }
      
      throw error;
    }
  }
  
  /**
   * Invalide le cache pour une cl√© donn√©e
   * @param {string} key - Cl√© du cache √† invalider (ou 'all' pour tout invalider)
   */
  function invalidateCache(key) {
    if (key === 'all') {
      Object.keys(cacheStore).forEach(k => delete cacheStore[k]);
      console.log('üóëÔ∏è Tout le cache a √©t√© invalid√©');
    } else if (cacheStore[key]) {
      delete cacheStore[key];
      console.log(`üóëÔ∏è Cache invalid√© pour "${key}"`);
    }
  }
  
  /**
   * Retourne le statut du cache pour une cl√© donn√©e
   * @param {string} key - Cl√© du cache √† v√©rifier
   * @returns {Object} Statut du cache (exists, age, isExpired)
   */
  function cacheStatus(key, ttl = DEFAULT_CACHE_TTL) {
    if (!cacheStore[key]) {
      return { exists: false, age: null, isExpired: true };
    }
    
    const now = Date.now();
    const age = now - cacheStore[key].timestamp;
    const isExpired = age > ttl;
    
    return {
      exists: true,
      age: Math.floor(age / 1000), // en secondes
      isExpired: isExpired
    };
  }
  
  /**
   * Pr√©-charge des donn√©es en cache
   * @param {string} key - Cl√© pour le cache
   * @param {any} data - Donn√©es √† mettre en cache
   */
  function preloadCache(key, data) {
    cacheStore[key] = {
      data: data,
      timestamp: Date.now()
    };
    console.log(`üì• Donn√©es pr√©-charg√©es en cache pour "${key}"`);
  }
  
  return {
    loadWithCache,
    invalidateCache,
    cacheStatus,
    preloadCache
  };
}
